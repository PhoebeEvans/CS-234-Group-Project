/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cs234project;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author phoeb
 */
public class editLoansMWindow extends javax.swing.JFrame {
    private int materialType;
    private int type;
    private int response;
    private String search;
    private String materialFile;
    private String materialWord;
    private String oldMaterial;
    
    private int editRemove;
    private String searchPatron;
    private String searchMaterial;
    
    
    private String patronFile;
    private String mediaFile;
    
    private String employeeName;
    private String employeeId;
    private String patronResponse;
    private String materialResponse;
    private String[] arrLine;
    private String[] arrLine2;
    private String patronReply;
    private String materialReply;
    private String[] tempNameArr;
    
    private String[] nameArr;
    private String[] idArr;
    private String[] ageArr;
    private String[] ageGroupArr;
    private String[] dobArr;
    private String[] addressArr;
    private String[] phoneArr;
    private String[] tempArr;
    
    private String[] titleArr;
    private String[] authorArr;
    private String[] dateArr;
    private String[] countryArr;
    private String[] genreArr; 
    private String[] idMArr;
    
    private int patronValue;
    private int materialValue;
    private String materialName;
    
    private String patronname;
    private String patronId;
    private String patronDOB;
    
    private String materialTypeName;
    private String materialDate;
    private String materialId;
    private String currentDate;
    private String dueDate;
    private int loanlength;
    
    private String[] materialArr;
    private String[] mDateArr;
    private String[] materialIdArr;
    private String[] patronArr;
    
    private String[] patronidArr;
    private String[] indateArr;
    private String[] outdateArr;
    private String[] employeeArr;
    private String[] employeeidArr;
    
    private int loan;
    
    private DefaultListModel dm2 = new DefaultListModel();
    /**
     * Creates new form editLoansMWindow
     */
    public editLoansMWindow(String selection, int numb) {
        initComponents();
        
        response = numb-1;
        oldMaterial = selection;
        oldMaterialPrint.setText("The current material is " + oldMaterial);
        
        int value = 1000; 
        
        
        materialArr = new String[value];
        mDateArr = new String[value];
        materialIdArr = new String[value];
        patronArr = new String[value];
        dobArr = new String[value]; 
        patronidArr = new String[value];
        indateArr = new String[value];
        arrLine = new String[10];
        outdateArr = new String[value];
        employeeArr = new String[value];
        employeeidArr = new String[value];
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        materialTypeButtonGroup = new javax.swing.ButtonGroup();
        materialSearchButtonGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        oldMaterialPrint = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bookButton = new javax.swing.JRadioButton();
        movieButton = new javax.swing.JRadioButton();
        titleButton = new javax.swing.JRadioButton();
        authorButton = new javax.swing.JRadioButton();
        countryButton = new javax.swing.JRadioButton();
        dateButton = new javax.swing.JRadioButton();
        genreButton = new javax.swing.JRadioButton();
        searchField = new javax.swing.JTextField();
        goButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        materialsList = new javax.swing.JList<>();
        newMaterialPrint = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 24)); // NOI18N
        jLabel1.setText("Editing Loans");

        oldMaterialPrint.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        oldMaterialPrint.setText("The current material is ????");

        jLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel3.setText("You are editing the material. Click on the material's name to select it.");

        jLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel4.setText("Are you picking a book or a movie?");

        materialTypeButtonGroup.add(bookButton);
        bookButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        bookButton.setText("Book");
        bookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookButtonActionPerformed(evt);
            }
        });

        materialTypeButtonGroup.add(movieButton);
        movieButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        movieButton.setText("Movie");
        movieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieButtonActionPerformed(evt);
            }
        });

        materialSearchButtonGroup.add(titleButton);
        titleButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        titleButton.setText("Title");
        titleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleButtonActionPerformed(evt);
            }
        });

        materialSearchButtonGroup.add(authorButton);
        authorButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        authorButton.setText("Author");
        authorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorButtonActionPerformed(evt);
            }
        });

        materialSearchButtonGroup.add(countryButton);
        countryButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        countryButton.setText("Country");
        countryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryButtonActionPerformed(evt);
            }
        });

        materialSearchButtonGroup.add(dateButton);
        dateButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        dateButton.setText("Publication Date");
        dateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateButtonActionPerformed(evt);
            }
        });

        materialSearchButtonGroup.add(genreButton);
        genreButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        genreButton.setText("Genre");
        genreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreButtonActionPerformed(evt);
            }
        });

        searchField.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N

        goButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        goButton.setText("GO");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        materialsList.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        materialsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        materialsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                materialsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(materialsList);

        newMaterialPrint.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        newMaterialPrint.setText("Your material is ????.");

        jLabel6.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel6.setText("Click the save button to save your edit.");

        saveButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(218, 218, 218)
                                .addComponent(saveButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(202, 202, 202)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(oldMaterialPrint)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bookButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(titleButton)
                                        .addGap(33, 33, 33)
                                        .addComponent(authorButton)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                        .addComponent(countryButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(dateButton)
                                        .addGap(34, 34, 34)
                                        .addComponent(genreButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(116, 116, 116)
                                        .addComponent(movieButton)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchField)
                                .addGap(18, 18, 18)
                                .addComponent(goButton))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(newMaterialPrint))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addComponent(oldMaterialPrint)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookButton)
                    .addComponent(movieButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateButton)
                    .addComponent(genreButton)
                    .addComponent(countryButton)
                    .addComponent(titleButton)
                    .addComponent(authorButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(newMaterialPrint)
                .addGap(27, 27, 27)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(saveButton)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookButtonActionPerformed
        // TODO add your handling code here:
        materialType = 1;
        materialFile = "BooksList.txt";
        materialWord = "Book";
        loanlength = 14;
        
        authorButton.setText("Author");
    }//GEN-LAST:event_bookButtonActionPerformed

    private void movieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieButtonActionPerformed
        // TODO add your handling code here:
        materialType = 2;
        materialFile = "MoviesList.txt";
        materialWord = "Movie";
        loanlength = 3;
        
        authorButton.setText("Director");
    }//GEN-LAST:event_movieButtonActionPerformed

    private void titleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleButtonActionPerformed
        // TODO add your handling code here:
        type = 1;
    }//GEN-LAST:event_titleButtonActionPerformed

    private void authorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorButtonActionPerformed
        // TODO add your handling code here:
        type = 2;
    }//GEN-LAST:event_authorButtonActionPerformed

    private void countryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryButtonActionPerformed
        // TODO add your handling code here:
        type = 4;
    }//GEN-LAST:event_countryButtonActionPerformed

    private void dateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateButtonActionPerformed
        // TODO add your handling code here:
        type = 3;
    }//GEN-LAST:event_dateButtonActionPerformed

    private void genreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreButtonActionPerformed
        // TODO add your handling code here:
        type = 5;
    }//GEN-LAST:event_genreButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // TODO add your handling code here:
        if(searchField.getText().isEmpty()){
            new error().setVisible(true);
        }
        
        else{
            materialReply = searchField.getText();
            
            try {
                searchMaterials();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(editLoansMWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_goButtonActionPerformed

    private void materialsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_materialsListMouseClicked
        // TODO add your handling code here:
        DefaultListModel listModel = (DefaultListModel) materialsList.getModel();
        materialValue = materialsList.getSelectedIndex();
        
        materialResponse = materialsList.getSelectedValue();
        
        arrLine = materialResponse.split("~");
        
        //System.out.println(arrLine);

        //find file name 
        mediaFile = arrLine[1] + arrLine[3] + "Id" + arrLine[6]; 
        String rePlace2 = mediaFile.replaceAll("[^a-zA-Z0-9]", "");
        mediaFile = rePlace2;
        String temp3 = mediaFile +".txt";
        mediaFile = temp3;
        materialName = arrLine[1];
        materialDate = arrLine[3];
        materialId = arrLine[6];
        
        
        newMaterialPrint.setText("Your new material is " + materialName);
        
        
        
    }//GEN-LAST:event_materialsListMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            // TODO add your handling code here:

            editMaterials();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(editLoansMWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    public void editMaterials() throws FileNotFoundException{
        //materialname for searching is made
        
        
        
        //Loans.txt is opened
        File viewFile = new File("Loans.txt");
        Scanner in = new Scanner(viewFile);
        PrintWriter out = new PrintWriter("temp.txt");
        
        int count = 1;
        int rnum = 0;
        
        while(in.hasNextLine()){
            String lineChange = in.nextLine();
            
            System.out.println(count + " " + lineChange);
            count++;
            
            arrLine = lineChange.split("~");
            //System.out.println(arrLine[0]);
            materialArr[rnum] = arrLine[0];
            mDateArr[rnum] = arrLine[1];
            materialIdArr[rnum] = arrLine[2];
            patronArr[rnum] = arrLine[3];
            dobArr[rnum] = arrLine[4];
            patronidArr[rnum] = arrLine[5];
            outdateArr[rnum] = arrLine[6];
            indateArr[rnum] = arrLine[7];
            employeeArr[rnum] = arrLine[8];
            employeeidArr[rnum] = arrLine[9];
            
            //System.out.println(name[num]);
            //System.out.println(age[num]);
            
            rnum++;
        }
        
        count = 0;
        String oldmediaFile = materialArr[response] + mDateArr[response] + "Id" + materialIdArr[response];
        oldmediaFile = oldmediaFile.toLowerCase();
        oldmediaFile = oldmediaFile.replaceAll("[^a-zA-Z0-9]", "");
        oldmediaFile = oldmediaFile + ".txt";
        
        String materialname = materialArr[response].toLowerCase();
        materialname = materialname.replaceAll("[^a-z]", "");
        
        
        //update material
        materialArr[response] = materialName;
        mDateArr[response] = materialDate;
        materialIdArr[response] = materialId;
        
        dates();
        
        indateArr[response] = dueDate;
        
        //patronFile name is deduced 
        patronFile = patronArr[response] + dobArr[response] + "Id" + patronidArr[response];
        patronFile = patronFile.toLowerCase();
        patronFile = patronFile.replaceAll("[^a-zA-Z0-9]", "");
        patronFile = patronFile + ".txt";
        
        //patronName for searching is made
        String patronName = patronArr[response].toLowerCase();
        patronName = patronName.replaceAll("[^a-z]", "");
        
        //mediaFile name is deduced
        mediaFile = materialArr[response] + mDateArr[response] + "Id" + materialIdArr[response];
        System.out.println("1 " + mediaFile);
        mediaFile = mediaFile.toLowerCase();
        System.out.println("2 " + mediaFile);
        mediaFile = mediaFile.replaceAll("[^a-zA-Z0-9]", "");
        System.out.println("3 " + mediaFile);
        mediaFile = mediaFile + ".txt";
        System.out.println("4 " + mediaFile);
        
        
        
        //write to files
        File inputMediaFile = new File(mediaFile);
        Scanner inMedia = new Scanner(inputMediaFile);
        PrintWriter outMedia = new PrintWriter("temp.txt");


        loan = 0;
        while(inMedia.hasNextLine()){
            //next line = next line in mediaFile
            String nextline = inMedia.nextLine();

            //splits nextline into an array
            arrLine2 = nextline.split("~");

            //the avalibility part is arrLine2[1]
            String avalibility = arrLine2[1];

            //non letters and spaces remove
            avalibility = avalibility.replaceAll("[^0-9]", "");

            //converts to an Integer
            int aval = Integer.parseInt(avalibility);

            //if the material has not been loaned yet.
            if(loan == 0){
                //if the copy is avalible
                if(aval == 0){
                    //updates info
                    arrLine2[1] = " 1 ";
                    arrLine2[2] = patronArr[response] + "#" + dobArr[response] + "#" + patronidArr[response]+ "#" + outdateArr[response] + "#" + indateArr[response];

                    

                    //changes loan status so that all copies are not loaned. 
                    loan = 1;
                }

            }

            //line is printed
            outMedia.println(mediaFile + "~" + arrLine2[1] + "~" + arrLine2[2]);
        }

        inMedia.close();
        outMedia.close();
        Files loans = new Files("temp.txt", mediaFile);
        loans.fileReplace();
        //if after all copies have been checked there are no avalible copies
        if(loan == 0){
            //print sorry
            System.out.println("Sorry, no copies of " + materialName + " were avalible.\n");
            
            copiesError c = new copiesError(materialName);
            c.error(materialName);
            
        }


        if(loan != 0){
            File inputOldMediaFile = new File(oldmediaFile);
            Scanner inOldMedia = new Scanner(inputOldMediaFile);
            PrintWriter outOldMedia = new PrintWriter("temp.txt");
            while(inOldMedia.hasNextLine()){
                String nextline = inOldMedia.nextLine();
                arrLine2 = nextline.split("~");
                String person = arrLine2[2];
                String [] spliter = person.split("#");
                String name = spliter[0];
                name = name.toLowerCase();

                name = name.replaceAll("[^a-z0-9]", "");

                if(name == null ? patronName == null : name.equals(patronName)){
                    outOldMedia.println(oldmediaFile + "~" + arrLine2[1] + "~" + arrLine2[2]);
                }
                else{
                    outOldMedia.println(nextline);

                }
            }

            inOldMedia.close();
            outOldMedia.close();
            Files loansO = new Files("temp.txt", oldmediaFile);
            loansO.fileReplace();
        }
        
        if(loan != 0){
            //loans are printed to temp file
            while(count < rnum){
                out.println(materialArr[count] + "~" + mDateArr[count] + "~" + materialIdArr[count] + "~" + patronArr[count] + "~" + dobArr[count] + "~" + patronidArr[count] + "~" + 
                            outdateArr[count] + "~" + indateArr[count] + "~" + employeeArr[count] + "~" + employeeidArr[count]);
                count++;
            }

            in.close();
            out.close();
            Files Loans = new Files("temp.txt", "Loans.txt");
            Loans.fileReplace();
            
            
            //fixing all of the patron file mess
            File inputpatronFile = new File(patronFile);
            Scanner inPatron = new Scanner(inputpatronFile);
            PrintWriter outPatron = new PrintWriter("temp.txt");
            while(inPatron.hasNextLine()){
                String nextline = inPatron.nextLine();
                arrLine2 = nextline.split("~");
                String title = arrLine2[3];

                String name = title.toLowerCase();

                name = name.replaceAll("[^a-z0-9]", "");

                if(name == null ? materialname == null : name.equals(materialname)){
                    arrLine2[1] = outdateArr[response];
                    arrLine2[3] = materialArr[response];
                    arrLine2[5] = indateArr[response];
                    outPatron.println(arrLine2[0] + "~" + arrLine2[1] + "~" +arrLine2[2] + "~" +arrLine2[3] + "~" +arrLine2[4] + "~" +arrLine2[5]);
                }

                else{
                    outPatron.println(arrLine2[0] + "~" + arrLine2[1] + "~" +arrLine2[2] + "~" +arrLine2[3] + "~" +arrLine2[4] + "~" +arrLine2[5]);
                }
            }

            inPatron.close();
            outPatron.close();
            Files patron = new Files("temp.txt",patronFile);
            patron.fileReplace();
            
        
        }
        
        else{
            in.close();
            out.close();
        }
        
    }
    
    public void dates(){
        Age loandate = new Age();
        currentDate = loandate.getcurrentDate();
        dueDate = loandate.getreturnDate(loanlength);
    }
    
    public void searchMaterials() throws FileNotFoundException{
        int rnum = 0;
        
        
        File inputFile = new File(materialFile);
        Scanner in = new Scanner(inputFile);
        
        int value = 1000;
        
        titleArr = new String[value];
        authorArr = new String[value];
        dateArr = new String[value];
        countryArr = new String[value];
        genreArr = new String[value];
        idMArr = new String[value];
        arrLine = new String[7]; 
        tempNameArr = new String[1];
        
        while(in.hasNextLine()){
            String lineChange = in.nextLine();
            
            arrLine = lineChange.split("~");
            
            titleArr[rnum] = arrLine[1];
            authorArr[rnum] = arrLine[2];
            dateArr[rnum] = arrLine[3];
            countryArr[rnum] = arrLine[4];
            genreArr[rnum] = arrLine[5];
            idMArr[rnum] = arrLine[6];
            
            rnum++;
        }
        
        materialsList.setModel(dm2);
        
        //director searcher
            if(type == 1){
                
                String resp = materialReply;
                
                String split[] = resp.split(" ", 0);
                for(String resp1: split){
                
                    String temp1 = resp1.toLowerCase();
                    resp1 = temp1;

                    temp1 = resp1.replaceAll("^a-z0-9", "");
                    resp1 = temp1; 

                    //System.out.println("in " + resp2);
                    
                    int numb = 1;
                    int count = 0;

                    while(count < rnum){

                        tempNameArr[0] = titleArr[count];

                        String directorNew = Arrays.toString(tempNameArr);
                        
                        String spliter[] = directorNew.split(" ", 0);
                        
                        for(String dNew: spliter){
                            String temp;

                            temp = dNew.toLowerCase();
                            dNew = temp; 

                            //non letters and spaces remove
                            temp = dNew.replaceAll("[^a-z0-9]", "");
                            dNew = temp;
                            //System.out.println("arr " + dNew);

                            if(resp1.equals(dNew)){
                                dm2.addElement(numb + " ~ " + titleArr[count] +  " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idMArr[count]);
                                //loans.println(numb + " ~ " + nameArr[count] + " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idArr[count]);
                                numb++;
                            }
                            
                        
                        }
                        count++;
                    }
                
                }
                
                 
            }

            //director searcher
            if(type == 2){
                
                String resp = materialReply;
                
                String split[] = resp.split(" ", 0);
                for(String resp2: split){
                
                    String temp2 = resp2.toLowerCase();
                    resp2 = temp2;

                    temp2 = resp2.replaceAll("^a-z0-9", "");
                    resp2 = temp2; 

                    //System.out.println("in " + resp2);
                    
                    int numb = 1;
                    int count = 0;

                    while(count < rnum){

                        tempNameArr[0] = authorArr[count];

                        String directorNew = Arrays.toString(tempNameArr);
                        
                        String spliter[] = directorNew.split(" ", 0);
                        
                        for(String dNew: spliter){
                            String temp;

                            temp = dNew.toLowerCase();
                            dNew = temp; 

                            //non letters and spaces remove
                            temp = dNew.replaceAll("[^a-z0-9]", "");
                            dNew = temp;
                            //System.out.println("arr " + dNew);

                            if(resp2.equals(dNew)){
                                dm2.addElement(numb + " ~ " + titleArr[count] + " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idMArr[count]);
                                //loans.println(numb + " ~ " + nameArr[count] + " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idArr[count]);
                                numb++;
                            }
                            
                        
                        }
                        count++;
                    }
                
                }
                
                 
            }
            
            //age searcher
            if(type == 3){
                
                int ageInt = Integer.parseInt(materialReply);
                int count = 0;
                int numb = 1;
                
                while(count  < rnum){
                    
                    tempNameArr[0] = dateArr[count];

                    String dateNew = Arrays.toString(tempNameArr);
                    String temp;
                    temp = dateNew.replaceAll("[^0-9]", "");
                    dateNew = temp;
                    
                    int intAge = Integer.parseInt(dateNew);

                    if(ageInt == intAge){
                        dm2.addElement(numb + " ~ " + titleArr[count] + " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idMArr[count]);
                        //loans.println(numb + " ~ " + nameArr[count] + " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idArr[count]);
                        numb++;
                    }
                    count++;

                }
                
                
                
            }
            
            //country searcher
            
            if(type == 4){
                String resp = materialReply;
                
                String split[] = resp.split(" ", 0);
                for(String resp4: split){
                
                    String temp4 = resp4.toLowerCase();
                    resp4 = temp4;

                    temp4 = resp4.replaceAll("^a-z0-9", "");
                    resp4 = temp4; 

                    //System.out.println("in " + resp2);
                    
                    int numb = 1;
                    int count = 0;

                    while(count < rnum){

                        tempNameArr[0] = countryArr[count];

                        String directorNew = Arrays.toString(tempNameArr);
                        
                        String spliter[] = directorNew.split(" ", 0);
                        
                        for(String cNew: spliter){
                            String temp;

                            temp = cNew.toLowerCase();
                            cNew = temp; 

                            //non letters and spaces remove
                            temp = cNew.replaceAll("[^a-z0-9]", "");
                            cNew = temp;
                            //System.out.println("arr " + dNew);

                            if(resp4.equals(cNew)){
                                dm2.addElement(numb + " ~ " + titleArr[count] + " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idMArr[count]);
                                //loans.println(numb + " ~ " + nameArr[count] + " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idArr[count]);
                                numb++;
                            }
                            
                        
                        }
                        count++;
                    }
                
                }
            
            }
            //genre searcher
            //director searcher
            if(type == 5){
                
                String respG = materialReply;
                
                String split5[] = respG.split(" ", 0);
                for(String resp5: split5){
                
                    String temp5 = resp5.toLowerCase();
                    resp5 = temp5;

                    temp5 = resp5.replaceAll("^a-z0-9", "");
                    resp5 = temp5; 

                    //System.out.println("in " + resp2);
                    
                    int numb = 1;
                    int count = 0;

                    while(count < rnum){

                        tempNameArr[0] = genreArr[count];

                        String directorNew = Arrays.toString(tempNameArr);
                        
                        String spliter[] = directorNew.split(" ", 0);
                        
                        for(String gNew: spliter){
                            String temp;

                            temp = gNew.toLowerCase();
                            gNew = temp; 

                            //non letters and spaces remove
                            temp = gNew.replaceAll("[^a-z0-9]", "");
                            gNew = temp;
                            //System.out.println("arr " + dNew);

                            if(resp5.equals(gNew)){
                                dm2.addElement(numb + " ~ " + titleArr[count] + " ~ " + authorArr[count] + " ~ " + dateArr[count] + " ~ " + countryArr[count] + " ~ " + genreArr[count] + " ~ " + idMArr[count]);
                                
                                numb++;
                            }
                            
                        
                        }
                        count++;
                    }
                }
            }
            
        
     in.close();
    }
    /**
     * @param args the command line arguments
     */
    public void editMwindow(String selection, int numb) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editLoansMWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editLoansMWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editLoansMWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editLoansMWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editLoansMWindow(selection, numb).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton authorButton;
    private javax.swing.JRadioButton bookButton;
    private javax.swing.JRadioButton countryButton;
    private javax.swing.JRadioButton dateButton;
    private javax.swing.JRadioButton genreButton;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup materialSearchButtonGroup;
    private javax.swing.ButtonGroup materialTypeButtonGroup;
    private javax.swing.JList<String> materialsList;
    private javax.swing.JRadioButton movieButton;
    private javax.swing.JLabel newMaterialPrint;
    private javax.swing.JLabel oldMaterialPrint;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JRadioButton titleButton;
    // End of variables declaration//GEN-END:variables
}
